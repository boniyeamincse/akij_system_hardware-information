<#
.SYNOPSIS
    Generates a detailed HTML report of system hardware information.

.DESCRIPTION
    This script collects comprehensive hardware information from the system including:
    - System overview and identifiers
    - BIOS and serial numbers
    - Motherboard details
    - Processor information
    - Memory (RAM) specifications
    - Storage devices
    - Graphics adapters
    
    The information is formatted into a styled HTML report for easy viewing.

.NOTES
    File Name      : akijinfo.ps1
    Author         : AKIJ System Information Tool
    Prerequisite   : PowerShell 3.0 or later

.EXAMPLE
    .\akijinfo.ps1
    
    Runs the script and generates an HTML report in the current directory.
#>

# Set strict mode and error action preference
Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

# Function to format file size to readable format
function Format-FileSize {
    param ([long]$Size)
    
    if ($Size -ge 1TB) { return "{0:N2} TB" -f ($Size / 1TB) }
    if ($Size -ge 1GB) { return "{0:N2} GB" -f ($Size / 1GB) }
    if ($Size -ge 1MB) { return "{0:N2} MB" -f ($Size / 1MB) }
    if ($Size -ge 1KB) { return "{0:N2} KB" -f ($Size / 1KB) }
    
    return "$Size Bytes"
}

# Begin Script Execution
try {
    # Create report file name with timestamp
    $date = Get-Date -Format "yyyyMMdd-HHmmss"
    $computerName = $env:COMPUTERNAME.ToLower()
    $reportPath = ".\AkijSystemInfo_${computerName}_${date}.html"
    
    Write-Host "Generating system hardware information report..." -ForegroundColor Cyan
    
    # Define HTML header with CSS styling
    $htmlHeader = @"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AKIJ Group System Information Report</title>
    <style>
        body { 
            font-family: 'Segoe UI', Arial, sans-serif; 
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        header {
            background-color: #0078d7;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px 5px 0 0;
            margin-bottom: 20px;
        }
        h1 { 
            margin: 0;
            font-size: 28px;
        }
        h2 { 
            color: #0078d7;
            border-bottom: 2px solid #0078d7;
            padding-bottom: 5px;
            margin-top: 30px;
        }
        .section { 
            background-color: white;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        table { 
            border-collapse: collapse;
            width: 100%;
            margin-top: 10px;
        }
        th { 
            background-color: #0078d7;
            color: white;
            text-align: left;
            padding: 12px 15px;
        }
        td { 
            padding: 10px 15px;
            border-bottom: 1px solid #ddd;
        }
        tr:nth-child(even) { 
            background-color: #f9f9f9;
        }
        tr:hover { 
            background-color: #f0f7ff;
        }
        .timestamp { 
            color: #666;
            font-style: italic;
            text-align: center;
            margin: 10px 0 20px 0;
        }
        .serial { 
            font-family: monospace;
            background-color: #f8f9fa;
            padding: 2px 4px;
            border: 1px solid #eee;
            border-radius: 3px;
        }
        .warning {
            color: #e74c3c;
            font-weight: bold;
        }
        footer {
            text-align: center;
            margin-top: 20px;
            color: #666;
            font-size: 12px;
        }
        @media print {
            body { background-color: white; }
            .section { box-shadow: none; border: 1px solid #ddd; }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>AKIJ Group System Information Report</h1>
        </header>
        <p class="timestamp">Generated on $(Get-Date -Format "yyyy-MM-dd HH:mm:ss") for system: $computerName</p>
"@

    # Define HTML footer
    $htmlFooter = @"
        <footer>
    <p>&copy; 2025 AKIJ IT Team. All rights reserved.</p>
    <p>Author : Boni Yeamin </p>
    <p>Generated by AKIJ IT Team</p>
    <p>Report Date: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")</p>
</footer>

    </div>
</body>
</html>
"@

    # Start building HTML body
    $htmlBody = ""

    # --------------------
    # Collecting System Information
    # --------------------
    Write-Host "  Collecting system information..." -ForegroundColor Green
    
    # System Information
    $computerSystem = Get-CimInstance -ClassName Win32_ComputerSystem
    $os = Get-CimInstance -ClassName Win32_OperatingSystem
    $bios = Get-CimInstance -ClassName Win32_BIOS
    $manufacturer = Get-CimInstance -ClassName Win32_ComputerSystemProduct
    
    # Motherboard Information
    $motherboard = Get-CimInstance -ClassName Win32_BaseBoard
    $enclosure = Get-CimInstance -ClassName Win32_SystemEnclosure
    
    # Processor Information
    $processor = Get-CimInstance -ClassName Win32_Processor
    
    # Memory Information
    $physicalMemory = Get-CimInstance -ClassName Win32_PhysicalMemory
    
    # Storage Information
    $diskDrives = Get-CimInstance -ClassName Win32_DiskDrive
    $logicalDisks = Get-CimInstance -ClassName Win32_LogicalDisk -Filter "DriveType=3"
    
    # Graphics Information
    $videoController = Get-CimInstance -ClassName Win32_VideoController
    
    # Network Information
    $networkAdapters = Get-CimInstance -ClassName Win32_NetworkAdapter | Where-Object { $_.PhysicalAdapter -eq $true }
    $networkConfig = Get-CimInstance -ClassName Win32_NetworkAdapterConfiguration | Where-Object { $_.IPEnabled -eq $true }

    # --------------------
    # Building HTML Sections
    # --------------------
    
    # System Overview Section
    $htmlBody += @"
    <div class="section">
        <h2>System Overview</h2>
        <table>
            <tr><td><strong>Computer Name</strong></td><td>$($computerSystem.Name)</td></tr>
            <tr><td><strong>Manufacturer</strong></td><td>$($computerSystem.Manufacturer)</td></tr>
            <tr><td><strong>Model</strong></td><td>$($computerSystem.Model)</td></tr>
            <tr><td><strong>System Type</strong></td><td>$($computerSystem.SystemType)</td></tr>
            <tr><td><strong>Operating System</strong></td><td>$($os.Caption) $($os.Version)</td></tr>
            <tr><td><strong>OS Architecture</strong></td><td>$($os.OSArchitecture)</td></tr>
            <tr><td><strong>OS Build</strong></td><td>$($os.BuildNumber)</td></tr>
            <tr><td><strong>OS Install Date</strong></td><td>$($os.InstallDate)</td></tr>
            <tr><td><strong>Last Boot Time</strong></td><td>$($os.LastBootUpTime)</td></tr>
        </table>
    </div>
"@

    # BIOS and System Identifiers Section
    $htmlBody += @"
    <div class="section">
        <h2>BIOS and System Identifiers</h2>
        <table>
            <tr><td><strong>BIOS Manufacturer</strong></td><td>$($bios.Manufacturer)</td></tr>
            <tr><td><strong>BIOS Name</strong></td><td>$($bios.Name)</td></tr>
            <tr><td><strong>BIOS Version</strong></td><td>$($bios.Version)</td></tr>
            <tr><td><strong>BIOS Release Date</strong></td><td>$($bios.ReleaseDate)</td></tr>
            <tr><td><strong>BIOS Serial Number</strong></td><td class="serial">$($bios.SerialNumber)</td></tr>
            <tr><td><strong>System UUID</strong></td><td class="serial">$($manufacturer.UUID)</td></tr>
            <tr><td><strong>System SKU</strong></td><td class="serial">$($manufacturer.SKUNumber)</td></tr>
        </table>
    </div>
"@

    # Motherboard Details Section
    $htmlBody += @"
    <div class="section">
        <h2>Motherboard Information</h2>
        <table>
            <tr><td><strong>Manufacturer</strong></td><td>$($motherboard.Manufacturer)</td></tr>
            <tr><td><strong>Product</strong></td><td>$($motherboard.Product)</td></tr>
            <tr><td><strong>Model</strong></td><td>$($motherboard.Model)</td></tr>
            <tr><td><strong>Serial Number</strong></td><td class="serial">$($motherboard.SerialNumber)</td></tr>
            <tr><td><strong>Version</strong></td><td>$($motherboard.Version)</td></tr>
        </table>
    </div>
"@

    # System Enclosure Information Section
    $htmlBody += @"
    <div class="section">
        <h2>System Enclosure Information</h2>
        <table>
            <tr><td><strong>Manufacturer</strong></td><td>$($enclosure.Manufacturer)</td></tr>
            <tr><td><strong>Model</strong></td><td>$($enclosure.Model)</td></tr>
            <tr><td><strong>Serial Number</strong></td><td class="serial">$($enclosure.SerialNumber)</td></tr>
            <tr><td><strong>Asset Tag</strong></td><td class="serial">$($enclosure.SMBIOSAssetTag)</td></tr>
            <tr><td><strong>Chassis Type</strong></td><td>$($enclosure.ChassisTypes)</td></tr>
        </table>
    </div>
"@

    # Processor Information Section
    $htmlBody += @"
    <div class="section">
        <h2>Processor Information</h2>
        <table>
            <tr><td><strong>Name</strong></td><td>$($processor.Name)</td></tr>
            <tr><td><strong>Manufacturer</strong></td><td>$($processor.Manufacturer)</td></tr>
            <tr><td><strong>Description</strong></td><td>$($processor.Description)</td></tr>
            <tr><td><strong>Architecture</strong></td><td>$($processor.Architecture)</td></tr>
            <tr><td><strong>Cores</strong></td><td>$($processor.NumberOfCores)</td></tr>
            <tr><td><strong>Logical Processors</strong></td><td>$($processor.NumberOfLogicalProcessors)</td></tr>
            <tr><td><strong>Max Clock Speed</strong></td><td>$($processor.MaxClockSpeed) MHz</td></tr>
            <tr><td><strong>L2 Cache Size</strong></td><td>$(Format-FileSize $processor.L2CacheSize)</td></tr>
            <tr><td><strong>L3 Cache Size</strong></td><td>$(Format-FileSize $processor.L3CacheSize)</td></tr>
            <tr><td><strong>Socket Designation</strong></td><td>$($processor.SocketDesignation)</td></tr>
        </table>
    </div>
"@

    # Memory (RAM) Information Section
    $totalRAM = 0
    $memoryTable = ""
    foreach ($memory in $physicalMemory) {
        $capacityGB = [math]::Round($memory.Capacity / 1GB, 2)
        $totalRAM += $memory.Capacity
        $memoryTable += "<tr>
            <td>$($memory.Manufacturer)</td>
            <td>$($memory.PartNumber)</td>
            <td>$capacityGB GB</td>
            <td>$($memory.Speed) MHz</td>
            <td>$($memory.DeviceLocator)</td>
            <td class='serial'>$($memory.SerialNumber)</td>
        </tr>"
    }
    
    $totalRAMGB = [math]::Round($totalRAM / 1GB, 2)
    
    $htmlBody += @"
    <div class="section">
        <h2>Memory (RAM) Information</h2>
        <p><strong>Total Physical Memory: </strong>$totalRAMGB GB</p>
        <table>
            <tr>
                <th>Manufacturer</th>
                <th>Part Number</th>
                <th>Capacity</th>
                <th>Speed</th>
                <th>Location</th>
                <th>Serial Number</th>
            </tr>
            $memoryTable
        </table>
    </div>
"@

    # Storage Devices Section
    $storageTable = ""
    foreach ($disk in $diskDrives) {
        $sizeGB = [math]::Round($disk.Size / 1GB, 2)
        $storageTable += "<tr>
            <td>$($disk.Model)</td>
            <td>$($disk.MediaType)</td>
            <td>$sizeGB GB</td>
            <td>$($disk.InterfaceType)</td>
            <td class='serial'>$($disk.SerialNumber)</td>
        </tr>"
    }
    
    $htmlBody += @"
    <div class="section">
        <h2>Storage Devices</h2>
        <table>
            <tr>
                <th>Model</th>
                <th>Media Type</th>
                <th>Size</th>
                <th>Interface</th>
                <th>Serial Number</th>
            </tr>
            $storageTable
        </table>
    </div>
"@

    # Logical Drives Section
    $logicalDriveTable = ""
    foreach ($disk in $logicalDisks) {
        $sizeGB = [math]::Round($disk.Size / 1GB, 2)
        $freeGB = [math]::Round($disk.FreeSpace / 1GB, 2)
        $usedGB = [math]::Round(($disk.Size - $disk.FreeSpace) / 1GB, 2)
        $usedPercent = [math]::Round(($disk.Size - $disk.FreeSpace) / $disk.Size * 100, 1)
        
        $logicalDriveTable += "<tr>
            <td>$($disk.DeviceID)</td>
            <td>$($disk.VolumeName)</td>
            <td>$($disk.FileSystem)</td>
            <td>$sizeGB GB</td>
            <td>$freeGB GB</td>
            <td>$usedGB GB ($usedPercent%)</td>
        </tr>"
    }
    
    $htmlBody += @"
    <div class="section">
        <h2>Logical Drives</h2>
        <table>
            <tr>
                <th>Drive Letter</th>
                <th>Volume Name</th>
                <th>File System</th>
                <th>Total Size</th>
                <th>Free Space</th>
                <th>Used Space</th>
            </tr>
            $logicalDriveTable
        </table>
    </div>
"@

    # Graphics Information Section
    $graphicsTable = ""
    foreach ($gpu in $videoController) {
        $vramMB = if ($gpu.AdapterRAM) { [math]::Round($gpu.AdapterRAM / 1MB, 0) } else { "N/A" }
        $currentResolution = if ($gpu.CurrentHorizontalResolution -and $gpu.CurrentVerticalResolution) {
            "$($gpu.CurrentHorizontalResolution) x $($gpu.CurrentVerticalResolution)"
        } else { "N/A" }
        
        $graphicsTable += "<tr>
            <td>$($gpu.Name)</td>
            <td>$($gpu.VideoProcessor)</td>
            <td>$vramMB MB</td>
            <td>$currentResolution</td>
            <td>$($gpu.DriverVersion)</td>
            <td>$($gpu.DriverDate)</td>
        </tr>"
    }
    
    $htmlBody += @"
    <div class="section">
        <h2>Graphics Information</h2>
        <table>
            <tr>
                <th>Name</th>
                <th>Processor</th>
                <th>Video Memory</th>
                <th>Current Resolution</th>
                <th>Driver Version</th>
                <th>Driver Date</th>
            </tr>
            $graphicsTable
        </table>
    </div>
"@

    # Network Adapters Section
    $networkTable = ""
    foreach ($adapter in $networkAdapters) {
        # Safely get adapter configuration with error handling
        $adapterConfig = $networkConfig | Where-Object { $_.InterfaceIndex -eq $adapter.InterfaceIndex }
        
        # Handle IP addresses safely
        $ipAddresses = "N/A"
        if ($adapterConfig -and ($adapterConfig | Get-Member -Name "IPAddress" -ErrorAction SilentlyContinue)) {
            if ($adapterConfig.IPAddress) {
                $ipAddresses = $adapterConfig.IPAddress -join "<br>"
            }
        }
        
        # Handle MAC address safely
        $macAddress = "N/A"
        if ($adapter | Get-Member -Name "MACAddress" -ErrorAction SilentlyContinue) {
            if ($adapter.MACAddress) {
                $macAddress = $adapter.MACAddress
            }
        }
        
        # Handle gateway safely
        $gateway = "N/A"
        if ($adapterConfig -and ($adapterConfig | Get-Member -Name "DefaultIPGateway" -ErrorAction SilentlyContinue)) {
            if ($adapterConfig.DefaultIPGateway) {
                $gateway = $adapterConfig.DefaultIPGateway -join "<br>"
            }
        }
        
        # Handle speed safely
        $speed = "N/A"
        if ($adapter | Get-Member -Name "Speed" -ErrorAction SilentlyContinue) {
            if ($adapter.Speed) {
                $speed = [math]::Round($adapter.Speed / 1000000, 1).ToString() + " Mbps"
            }
        }
        
        # Handle connection name safely
        $connectionName = "N/A"
        if ($adapter | Get-Member -Name "NetConnectionID" -ErrorAction SilentlyContinue) {
            if ($adapter.NetConnectionID) {
                $connectionName = $adapter.NetConnectionID
            }
        }
        
        $networkTable += "<tr>
            <td>$($adapter.Name)</td>
            <td>$connectionName</td>
            <td>$macAddress</td>
            <td>$ipAddresses</td>
            <td>$gateway</td>
            <td>$speed</td>
        </tr>"
    }
    
    $htmlBody += @"
    <div class="section">
        <h2>Network Adapters</h2>
        <table>
            <tr>
                <th>Name</th>
                <th>Connection Name</th>
                <th>MAC Address</th>
                <th>IP Address</th>
                <th>Gateway</th>
                <th>Speed</th>
            </tr>
            $networkTable
        </table>
    </div>
"@

    # Write information to HTML file
    Write-Host "  Generating HTML report..." -ForegroundColor Green
    
    # Combine HTML parts
    $htmlContent = $htmlHeader + $htmlBody + $htmlFooter
    
    # Write to file
    $htmlContent | Out-File -FilePath $reportPath -Encoding UTF8
    
    Write-Host "Report generation completed successfully!" -ForegroundColor Green
    Write-Host "Report saved to: $reportPath" -ForegroundColor Yellow
    
    # Open the report in the default browser if requested
    $openReport = Read-Host "Would you like to open the report now? (Y/N)"
    if ($openReport -eq "Y" -or $openReport -eq "y") {
        Start-Process $reportPath
    }

} catch {
    Write-Host "Error generating report: $_" -ForegroundColor Red
    Write-Host "Stack Trace: $($_.ScriptStackTrace)" -ForegroundColor Red
} finally {
    Write-Host "Script execution completed." -ForegroundColor Cyan
}
